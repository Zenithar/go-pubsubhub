// Code generated by protoc-gen-defaults. DO NOT EDIT.

package topicv1beta1

import (
	"context"

	"github.com/bxcodec/faker"
)

// MockTopicAPIServer is the mock implementation of the TopicAPIServer. Use this to create mock services that
// return random data. Useful in UI Testing.
type MockTopicAPIServer struct{}

// List is mock implementation of the method List
func (MockTopicAPIServer) List(context.Context, *ListRequest) (*ListResponse, error) {
	var res ListResponse
	if err := faker.FakeData(&res); err != nil {
		return nil, err
	}
	return &res, nil
}

// Create is mock implementation of the method Create
func (MockTopicAPIServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	var res CreateResponse
	if err := faker.FakeData(&res); err != nil {
		return nil, err
	}
	return &res, nil
}

// Get is mock implementation of the method Get
func (MockTopicAPIServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	var res GetResponse
	if err := faker.FakeData(&res); err != nil {
		return nil, err
	}
	return &res, nil
}

// Update is mock implementation of the method Update
func (MockTopicAPIServer) Update(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	var res UpdateResponse
	if err := faker.FakeData(&res); err != nil {
		return nil, err
	}
	return &res, nil
}

// Publish is mock implementation of the method Publish
func (MockTopicAPIServer) Publish(context.Context, *PublishRequest) (*PublishResponse, error) {
	var res PublishResponse
	if err := faker.FakeData(&res); err != nil {
		return nil, err
	}
	return &res, nil
}

// Subscribe is mock implementation of the method Subscribe
func (MockTopicAPIServer) Subscribe(context.Context, *SubscribeRequest) (*SubscribeResponse, error) {
	var res SubscribeResponse
	if err := faker.FakeData(&res); err != nil {
		return nil, err
	}
	return &res, nil
}
