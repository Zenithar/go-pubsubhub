// MIT License
//
// Copyright (c) 2019 Thibault NORMAND
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

syntax = "proto3";

package pubsubhub.topic.v1beta1;

option (gogoproto.equal_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.populate_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option csharp_namespace = "Pubsubhub.Topic.V1Beta1";
option go_package = "topicv1beta1";
option java_multiple_files = true;
option java_outer_classname = "TopicApiProto";
option java_package = "org.zenithar.pubsubhub.topic.v1beta1";
option objc_class_prefix = "PTX";
option php_namespace = "Pubsubhub\\Topic\\V1Beta1";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/field_mask.proto";
import "pubsubhub/topic/v1beta1/topic.proto";

// -----------------------------------------------------------------------------

// Topic API declares topic management service contract.
service TopicAPI {
  // List accessible topics.
  rpc List(ListRequest) returns (ListResponse);
  // Create a topic.
  rpc Create(CreateRequest) returns (CreateResponse);
  // Get a topic by name.
  rpc Get(GetRequest) returns (GetResponse);
  // Update a topic.
  rpc Update(UpdateRequest) returns (UpdateResponse);
  // Publish a message to the topic.
  rpc Publish(PublishRequest) returns (PublishResponse);
  // Subscribe to a topic.
  rpc Subscribe(SubscribeRequest) returns (stream SubscribeResponse);
}

// ListRequest is used to request accessible topice for authenticated identity
message ListRequest {
  // Maximum number of topics to return.
  int32 page_size = 1;
  // The value returned by the last `ListResponse`; indicates that this is
  // a continuation of a prior `List` call, and that the system should
  // return the next page of data.
  string page_token = 2;
}

message ListResponse {
  // List of topics that match the request
  repeated Topic topics = 1;
  // If not empty, indicates that there may be more topics that match the
  // request; this value should be passed in a new `ListRequest`.
  string next_page_token = 2;
}

// CreateTopicRequest is the request object for topic registration.
message CreateRequest {
  // Topic has only a name
  string name = 1;
}

// CreateTopicResponse is the response of a topic registration.
message CreateResponse {
  // Topic properties
  Topic entity = 1;
}

message GetRequest {
  // Get a topic by name
  string name = 1;
}

message GetResponse {
  // Topic properties
  Topic entity = 1;
}

message UpdateRequest {
  // Indicate which topic to update.
  Topic topic = 1;
  // Indicates which fields in the provided topic to update.
  // Must be specified and non-empty.
  google.protobuf.FieldMask update_mask = 2;
}

message UpdateResponse {
  // Updated topic properties
  Topic entity = 2;
}

message PublishRequest {
  // Topic to publish message to
  string topic = 1;
  // List of messages to publish
  repeated Message messages = 2;
}

message PublishResponse {
  // List of message ids
  repeated string message_ids = 1;
}

message SubscribeRequest {
  // Topic to subscribe
  string topic = 1;
}

message SubscribeResponse {
  // Topic to subscribe
  string topic = 1;
  // Message received in the subscription
  Message message = 2;
}
